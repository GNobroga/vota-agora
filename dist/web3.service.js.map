{"version":3,"sources":["../src/web3.service.ts"],"sourcesContent":["import { Injectable, OnModuleInit } from \"@nestjs/common\";\r\nimport Web3 from \"web3\";\r\nimport AppConfig from \"./modules/shared/app.config\";\r\n\r\n@Injectable()\r\nexport default class Web3Service implements OnModuleInit {\r\n\r\n    private _web3: Web3;\r\n    \r\n    constructor(private readonly _appConfig: AppConfig) {}\r\n\r\n    async onModuleInit() {\r\n        // const blockChainUrl = this._appConfig.getBlockchainURL();\r\n        // this._web3 = new Web3(new Web3.providers.HttpProvider(blockChainUrl));\r\n        // const accounts = await this._web3.eth.getAccounts();\r\n        // if (!accounts.length) return;\r\n        // const account = accounts[0];\r\n        // const INITIAL_SUPPLY = 1000000000000000000000000n;\r\n        // const { abi, evm } = tokenCompile as any;\r\n        // const result = await new this._web3.eth.Contract(abi)\r\n        //     .deploy({ data: evm.bytecode.object, arguments: [INITIAL_SUPPLY] })\r\n        //     .send({\r\n        //         from: account,\r\n        //         gas: '1500000',\r\n        //         gasPrice: '30000000000',\r\n        //     });\r\n\r\n        // const tokenAddress = result.options.address; // Endereço do token\r\n         \r\n        // permite interagir com o contrato\r\n        // const tokenContract = new this._web3.eth.Contract(abi, tokenAddress).methods.name().call();\r\n            \r\n        // ver o saldo\r\n        // tokenContract.methods.balanceOf(account).call().then(console.log)\r\n\r\n        // const newAccount = this._web3.eth.accounts.create();\r\n\r\n        // console.log(newAccount.address)\r\n        // console.log(newAccount.privateKey) // pegar essa chave e enviar pro usuario\r\n\r\n    //     console.log(\"Token\", tokenAddress)\r\n\r\n    //     tokenContract.methods.\r\n    //     transfer(\"0xcDb938BDc7B6954859097CdAb87cf21B4AA5076A\", this._web3.utils.toWei('1000000', 'ether'))\r\n    //     .send({ from: account })\r\n    //     .then(console.log)\r\n    //     .catch(console.log)\r\n\r\n    //    setTimeout(() => {\r\n    //     tokenContract.methods.balanceOf(account).call().then(console.log);\r\n    //    }, 2000)\r\n\r\n\r\n            // Ao executar a aplicação salvar o id do token e verificar se ele existe, se não existir criar.\r\n    }\r\n}"],"names":["Web3Service","onModuleInit","constructor","_appConfig"],"mappings":";;;;;;;eAKqBA;;;wBALoB;kEAEnB;;;;;;;;;;;;;;;AAGP,IAAA,AAAMA,cAAN,MAAMA;IAMjB,MAAMC,eAAe;IACjB,4DAA4D;IAC5D,yEAAyE;IACzE,uDAAuD;IACvD,gCAAgC;IAChC,+BAA+B;IAC/B,qDAAqD;IACrD,4CAA4C;IAC5C,wDAAwD;IACxD,0EAA0E;IAC1E,cAAc;IACd,yBAAyB;IACzB,0BAA0B;IAC1B,mCAAmC;IACnC,UAAU;IAEV,oEAAoE;IAEpE,mCAAmC;IACnC,8FAA8F;IAE9F,cAAc;IACd,oEAAoE;IAEpE,uDAAuD;IAEvD,kCAAkC;IAClC,8EAA8E;IAElF,yCAAyC;IAEzC,6BAA6B;IAC7B,yGAAyG;IACzG,+BAA+B;IAC/B,yBAAyB;IACzB,0BAA0B;IAE1B,wBAAwB;IACxB,yEAAyE;IACzE,cAAc;IAGN,gGAAgG;IACxG;IA7CAC,YAAY,AAAiBC,UAAqB,CAAE;aAAvBA,aAAAA;IAAwB;AA8CzD"}