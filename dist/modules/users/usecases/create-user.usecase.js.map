{"version":3,"sources":["../../../../src/modules/users/usecases/create-user.usecase.ts"],"sourcesContent":["import { ConflictException, Inject, Injectable, Logger } from \"@nestjs/common\";\r\nimport IDefaultUseCase from \"src/core/usecases/default.usecase\";\r\nimport UserWithAccountTokenResponseDTO from \"../dtos/response/user-with-account-token-response.dto\";\r\nimport { User } from \"../user.schema\";\r\nimport { IUserRepository, USER_REPOSITORY_TOKEN } from \"../interfaces/user-repository.interface\";\r\nimport { BLOCKCHAIN_SERVICE_TOKEN, IBlockchainTokenService } from \"src/modules/admin/interfaces/blockchain-token-service.interface\";\r\nimport { RoleType } from \"src/core/enums/role-type.enum\";\r\nimport * as bcrypt from 'bcrypt';\r\n\r\n@Injectable()\r\nexport default class CreateUserUseCase implements IDefaultUseCase<User, UserWithAccountTokenResponseDTO> {\r\n\r\n    private readonly _logger = new Logger(CreateUserUseCase.name);\r\n    \r\n    constructor(\r\n        @Inject(USER_REPOSITORY_TOKEN)\r\n        private readonly _userRepository: IUserRepository,\r\n        @Inject(BLOCKCHAIN_SERVICE_TOKEN)\r\n        private readonly _blockchainTokenService: IBlockchainTokenService\r\n    ) {}\r\n    \r\n    async execute(input: User): Promise<UserWithAccountTokenResponseDTO> {\r\n        input.document = input.document.replace(/\\D/g, '');\r\n\r\n        if ((await this._userRepository.findByDocument(input.document)) != null) {\r\n            throw new ConflictException(\"O documento não está disponível.\");\r\n        }\r\n\r\n        const { tokenAddress, accountAddress, privateKey } = await this._blockchainTokenService.createAccount();\r\n        input.accountAddress = accountAddress;\r\n        input.privateKey = privateKey;\r\n        input.password = await bcrypt.hash(input.password, 10);\r\n        input.role = RoleType.USER;\r\n        input = await this._userRepository.create(input);\r\n\r\n        if (await this._blockchainTokenService.transferEther(accountAddress)) {\r\n            this._logger.log(`Transferencia de Ether para ${accountAddress} realizada com sucesso!`);\r\n        } else {\r\n            this._logger.log(`Não foi possível transferir de Ether para ${accountAddress}.`);\r\n        }\r\n        \r\n        const response = new UserWithAccountTokenResponseDTO({\r\n            id: input['_id'],\r\n            fullName: input.fullName,\r\n            document: input.document,\r\n            tokenAddress,\r\n            privateKey,\r\n        })\r\n        return response;\r\n    }\r\n\r\n}"],"names":["CreateUserUseCase","execute","input","document","replace","_userRepository","findByDocument","ConflictException","tokenAddress","accountAddress","privateKey","_blockchainTokenService","createAccount","password","bcrypt","hash","role","RoleType","USER","create","transferEther","_logger","log","response","UserWithAccountTokenResponseDTO","id","fullName","constructor","Logger","name"],"mappings":";;;;;;;eAUqBA;;;wBAVyC;wFAElB;yCAEW;iDACW;8BACzC;gEACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGT,IAAA,AAAMA,oBAAN,MAAMA;IAWjB,MAAMC,QAAQC,KAAW,EAA4C;QACjEA,MAAMC,QAAQ,GAAGD,MAAMC,QAAQ,CAACC,OAAO,CAAC,OAAO;QAE/C,IAAI,AAAC,MAAM,IAAI,CAACC,eAAe,CAACC,cAAc,CAACJ,MAAMC,QAAQ,KAAM,MAAM;YACrE,MAAM,IAAII,yBAAiB,CAAC;QAChC;QAEA,MAAM,EAAEC,YAAY,EAAEC,cAAc,EAAEC,UAAU,EAAE,GAAG,MAAM,IAAI,CAACC,uBAAuB,CAACC,aAAa;QACrGV,MAAMO,cAAc,GAAGA;QACvBP,MAAMQ,UAAU,GAAGA;QACnBR,MAAMW,QAAQ,GAAG,MAAMC,QAAOC,IAAI,CAACb,MAAMW,QAAQ,EAAE;QACnDX,MAAMc,IAAI,GAAGC,sBAAQ,CAACC,IAAI;QAC1BhB,QAAQ,MAAM,IAAI,CAACG,eAAe,CAACc,MAAM,CAACjB;QAE1C,IAAI,MAAM,IAAI,CAACS,uBAAuB,CAACS,aAAa,CAACX,iBAAiB;YAClE,IAAI,CAACY,OAAO,CAACC,GAAG,CAAC,CAAC,4BAA4B,EAAEb,eAAe,uBAAuB,CAAC;QAC3F,OAAO;YACH,IAAI,CAACY,OAAO,CAACC,GAAG,CAAC,CAAC,0CAA0C,EAAEb,eAAe,CAAC,CAAC;QACnF;QAEA,MAAMc,WAAW,IAAIC,wCAA+B,CAAC;YACjDC,IAAIvB,KAAK,CAAC,MAAM;YAChBwB,UAAUxB,MAAMwB,QAAQ;YACxBvB,UAAUD,MAAMC,QAAQ;YACxBK;YACAE;QACJ;QACA,OAAOa;IACX;IAnCAI,YACI,AACiBtB,eAAgC,EACjD,AACiBM,uBAAgD,CACnE;aAHmBN,kBAAAA;aAEAM,0BAAAA;aANJU,UAAU,IAAIO,cAAM,CAAC5B,kBAAkB6B,IAAI;IAOzD;AAgCP"}