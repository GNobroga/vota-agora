{"version":3,"sources":["../../../../src/modules/admin/services/token-address.service.ts"],"sourcesContent":["import { Injectable, OnModuleInit } from \"@nestjs/common\";\r\nimport { Model } from \"mongoose\";\r\nimport AppConfig from \"src/modules/shared/app.config\";\r\nimport { TokenAddress } from \"../schemas/token-address.schema\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport Web3 from \"web3\";\r\nimport contractOutputConfig from \"src/config/blockchain/contract-output.config\";\r\n\r\n@Injectable()\r\nexport default class TokenAddressService implements OnModuleInit {\r\n\r\n    private _web3: Web3;\r\n\r\n    get web3() {\r\n        return this._web3;\r\n    }\r\n\r\n    constructor(\r\n        @InjectModel(TokenAddress.name)\r\n        private readonly _tokenModel: Model<TokenAddress>,\r\n        private readonly _appConfig: AppConfig) {}\r\n    \r\n\r\n    async onModuleInit() {\r\n        const blockChainUrl = this._appConfig.getBlockchainURL();\r\n        this._web3 = new Web3(new Web3.providers.HttpProvider(blockChainUrl));\r\n        const { abi, evm } = contractOutputConfig as any;\r\n\r\n        const tokenAddressRecovered = (await this._tokenModel.findOne())?.toObject();\r\n    \r\n        if (tokenAddressRecovered?.tokenAddress && (await this.checkToken(abi, tokenAddressRecovered.tokenAddress))) {\r\n            return;\r\n        } \r\n       \r\n        await this._tokenModel.deleteMany();\r\n      \r\n        let accounts: string[] = [];\r\n        accounts = await this._web3.eth.getAccounts();\r\n\r\n        if (!accounts.length) return;\r\n        const account = accounts[0];\r\n        const INITIAL_SUPPLY = 1000000000000000000000000n;\r\n\r\n        const result = await new this._web3.eth.Contract(abi)\r\n        .deploy({ data: evm.bytecode.object, arguments: [INITIAL_SUPPLY] })\r\n        .send({\r\n            from: account,\r\n            gas: '1500000',\r\n            gasPrice: '30000000000',\r\n        });\r\n\r\n        const tokenAddress = new TokenAddress({\r\n            tokenAddress: result.options.address,\r\n            accountAddress: account,\r\n        });\r\n\r\n        (await this._tokenModel.create(tokenAddress)).save();\r\n    }\r\n\r\n    async checkToken(abi: any, tokenAddress: string) {\r\n        try {\r\n            const tokenContract = new this._web3.eth.Contract(abi, tokenAddress);\r\n            await Promise.all([tokenContract.methods.name().call(),  tokenContract.methods.symbol().call()]);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["TokenAddressService","web3","_web3","onModuleInit","blockChainUrl","_appConfig","getBlockchainURL","Web3","providers","HttpProvider","abi","evm","contractOutputConfig","tokenAddressRecovered","_tokenModel","findOne","toObject","tokenAddress","checkToken","deleteMany","accounts","eth","getAccounts","length","account","INITIAL_SUPPLY","result","Contract","deploy","data","bytecode","object","arguments","send","from","gas","gasPrice","TokenAddress","options","address","accountAddress","create","save","tokenContract","Promise","all","methods","name","call","symbol","error","constructor"],"mappings":";;;;;;;eASqBA;;;wBAToB;0BACnB;kEACA;oCACO;2BACD;6DACX;6EACgB;;;;;;;;;;;;;;;;;;;;AAGlB,IAAA,AAAMA,sBAAN,MAAMA;IAIjB,IAAIC,OAAO;QACP,OAAO,IAAI,CAACC,KAAK;IACrB;IAQA,MAAMC,eAAe;QACjB,MAAMC,gBAAgB,IAAI,CAACC,UAAU,CAACC,gBAAgB;QACtD,IAAI,CAACJ,KAAK,GAAG,IAAIK,aAAI,CAAC,IAAIA,aAAI,CAACC,SAAS,CAACC,YAAY,CAACL;QACtD,MAAM,EAAEM,GAAG,EAAEC,GAAG,EAAE,GAAGC,6BAAoB;QAEzC,MAAMC,wBAAyB,CAAA,MAAM,IAAI,CAACC,WAAW,CAACC,OAAO,EAAC,GAAIC;QAElE,IAAIH,uBAAuBI,gBAAiB,MAAM,IAAI,CAACC,UAAU,CAACR,KAAKG,sBAAsBI,YAAY,GAAI;YACzG;QACJ;QAEA,MAAM,IAAI,CAACH,WAAW,CAACK,UAAU;QAEjC,IAAIC,WAAqB,EAAE;QAC3BA,WAAW,MAAM,IAAI,CAAClB,KAAK,CAACmB,GAAG,CAACC,WAAW;QAE3C,IAAI,CAACF,SAASG,MAAM,EAAE;QACtB,MAAMC,UAAUJ,QAAQ,CAAC,EAAE;QAC3B,MAAMK,iBAAiB,0BAA0B;QAEjD,MAAMC,SAAS,MAAM,IAAI,IAAI,CAACxB,KAAK,CAACmB,GAAG,CAACM,QAAQ,CAACjB,KAChDkB,MAAM,CAAC;YAAEC,MAAMlB,IAAImB,QAAQ,CAACC,MAAM;YAAEC,WAAW;gBAACP;aAAe;QAAC,GAChEQ,IAAI,CAAC;YACFC,MAAMV;YACNW,KAAK;YACLC,UAAU;QACd;QAEA,MAAMnB,eAAe,IAAIoB,gCAAY,CAAC;YAClCpB,cAAcS,OAAOY,OAAO,CAACC,OAAO;YACpCC,gBAAgBhB;QACpB;QAEC,CAAA,MAAM,IAAI,CAACV,WAAW,CAAC2B,MAAM,CAACxB,aAAY,EAAGyB,IAAI;IACtD;IAEA,MAAMxB,WAAWR,GAAQ,EAAEO,YAAoB,EAAE;QAC7C,IAAI;YACA,MAAM0B,gBAAgB,IAAI,IAAI,CAACzC,KAAK,CAACmB,GAAG,CAACM,QAAQ,CAACjB,KAAKO;YACvD,MAAM2B,QAAQC,GAAG,CAAC;gBAACF,cAAcG,OAAO,CAACC,IAAI,GAAGC,IAAI;gBAAKL,cAAcG,OAAO,CAACG,MAAM,GAAGD,IAAI;aAAG;YAC/F,OAAO;QACX,EAAE,OAAOE,OAAO;YACZ,OAAO;QACX;IACJ;IAlDAC,YACI,AACiBrC,WAAgC,EACjD,AAAiBT,UAAqB,CAAE;aADvBS,cAAAA;aACAT,aAAAA;IAAwB;AAkDjD;;;8EApDkC0C"}