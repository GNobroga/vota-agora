{"version":3,"sources":["../../../../src/modules/admin/services/blockchain-token.service.ts"],"sourcesContent":["import { Inject, Injectable, NotFoundException, OnModuleInit } from \"@nestjs/common\";\r\nimport contractOutputConfig from \"src/config/blockchain/contract-output.config\";\r\nimport AppConfig from \"src/modules/shared/app.config\";\r\nimport Web3, { Contract } from \"web3\";\r\nimport WalletCreatedDTO from \"../dtos/wallet-created.dto\";\r\nimport { IBlockchainTokenService } from \"../interfaces/blockchain-token-service.interface\";\r\nimport { BLOCKCHAIN_REPOSITORY_TOKEN, IBlockchainTokenRepository } from \"../interfaces/blockchain-token-repository.interface\";\r\nimport { BlockchainToken } from \"../schemas/blockchain-token.schema\";\r\n\r\n@Injectable()\r\nexport default class BlockchainTokenService implements OnModuleInit, IBlockchainTokenService {\r\n\r\n    private _web3: Web3;\r\n\r\n    private tokenContract: Contract<any>;\r\n\r\n    get web3() {\r\n        return this._web3;\r\n    }\r\n\r\n    constructor(\r\n        @Inject(BLOCKCHAIN_REPOSITORY_TOKEN)\r\n        private readonly _blockchainTokenRepository: IBlockchainTokenRepository,\r\n        private readonly _appConfig: AppConfig) {}\r\n\r\n\r\n    async findBalanceByAccountAddress(accountAddress: string): Promise<bigint> {\r\n       try {\r\n         return await this.tokenContract.methods.balanceOf(accountAddress).call();\r\n       } catch(error) {\r\n         return 0n;\r\n       }\r\n    }\r\n\r\n\r\n    async createAccount(): Promise<WalletCreatedDTO> {\r\n        if (!this._web3) {\r\n            throw new NotFoundException('Web3 is not configured.');\r\n        }\r\n        const account = this._web3.eth.accounts.create();\r\n        const { tokenAddress } = await this._blockchainTokenRepository.findFirst();\r\n        \r\n        return new WalletCreatedDTO({\r\n            accountAddress: account.address,\r\n            privateKey: account.privateKey,\r\n            tokenAddress\r\n        });\r\n    }\r\n\r\n\r\n    async onModuleInit() {\r\n        try {\r\n            const blockChainUrl = this._appConfig.blockchainURL;\r\n            this._web3 = new Web3(new Web3.providers.HttpProvider(blockChainUrl));\r\n            const { abi, evm } = contractOutputConfig as any;\r\n\r\n\r\n            const tokenAddressRecovered = await this._blockchainTokenRepository.findFirst();\r\n        \r\n            if (tokenAddressRecovered?.tokenAddress && (await this.checkToken(abi, tokenAddressRecovered.tokenAddress))) {\r\n                this.tokenContract = new this._web3.eth.Contract(abi, tokenAddressRecovered.tokenAddress);\r\n                return;\r\n            } \r\n        \r\n            await this._blockchainTokenRepository.deleteAll();\r\n        \r\n            let accounts: string[] = [];\r\n            accounts = await this._web3.eth.getAccounts();\r\n\r\n            if (!accounts.length) return;\r\n            const account = accounts[0];\r\n            const INITIAL_SUPPLY = 1000000000000000000000000n;\r\n\r\n            const result = await new this._web3.eth.Contract(abi)\r\n            .deploy({ data: evm.bytecode.object, arguments: [INITIAL_SUPPLY] })\r\n            .send({\r\n                from: account,\r\n                gas: '1500000',\r\n                gasPrice: '30000000000',\r\n            });\r\n\r\n            const blockchainToken = new BlockchainToken({\r\n                tokenAddress: result.options.address,\r\n                accountAddress: account,\r\n            });\r\n\r\n            await this._blockchainTokenRepository.create(blockchainToken);\r\n            this.tokenContract = new this._web3.eth.Contract(abi, blockchainToken.tokenAddress);\r\n        } catch(error) {\r\n            console.log(error); \r\n        }\r\n    }\r\n \r\n    async checkToken(abi: any, tokenAddress: string) {\r\n        try {\r\n            const tokenContract = new this._web3.eth.Contract(abi, tokenAddress);\r\n            await Promise.all([tokenContract.methods.name().call(),  tokenContract.methods.symbol().call()]);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["BlockchainTokenService","web3","_web3","findBalanceByAccountAddress","accountAddress","tokenContract","methods","balanceOf","call","error","createAccount","NotFoundException","account","eth","accounts","create","tokenAddress","_blockchainTokenRepository","findFirst","WalletCreatedDTO","address","privateKey","onModuleInit","blockChainUrl","_appConfig","blockchainURL","Web3","providers","HttpProvider","abi","evm","contractOutputConfig","tokenAddressRecovered","checkToken","Contract","deleteAll","getAccounts","length","INITIAL_SUPPLY","result","deploy","data","bytecode","object","arguments","send","from","gas","gasPrice","blockchainToken","BlockchainToken","options","console","log","Promise","all","name","symbol","constructor"],"mappings":"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"}