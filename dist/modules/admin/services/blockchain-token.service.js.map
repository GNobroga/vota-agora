{"version":3,"sources":["../../../../src/modules/admin/services/blockchain-token.service.ts"],"sourcesContent":["import { Inject, Injectable, NotFoundException, OnModuleInit } from \"@nestjs/common\";\r\nimport contractOutputConfig from \"src/config/blockchain/contract-output.config\";\r\nimport AppConfig from \"src/modules/shared/app.config\";\r\nimport Web3, { Contract } from \"web3\";\r\nimport WalletCreatedDTO from \"../dtos/wallet-created.dto\";\r\nimport { IBlockchainTokenService } from \"../interfaces/blockchain-token-service.interface\";\r\nimport { BLOCKCHAIN_REPOSITORY_TOKEN, IBlockchainTokenRepository } from \"../interfaces/blockchain-token-repository.interface\";\r\nimport { BlockchainToken } from \"../schemas/blockchain-token.schema\";\r\n\r\n@Injectable()\r\nexport default class BlockchainTokenService implements OnModuleInit, IBlockchainTokenService {\r\n\r\n    private _web3: Web3;\r\n\r\n    private tokenContract: Contract<any>;\r\n\r\n    get web3() {\r\n        return this._web3;\r\n    }\r\n\r\n    constructor(\r\n        @Inject(BLOCKCHAIN_REPOSITORY_TOKEN)\r\n        private readonly _blockchainTokenRepository: IBlockchainTokenRepository,\r\n        private readonly _appConfig: AppConfig) {}\r\n\r\n\r\n    async registerVote(address: string, publicConsultationId: string): Promise<boolean> {\r\n       try {\r\n        console.log(address)\r\n            await this.tokenContract.methods.castVote(publicConsultationId)\r\n                .send({ from: address });\r\n            return true;\r\n       } catch(error) {\r\n        console.log(error)\r\n            return false;\r\n       }\r\n    }\r\n\r\n\r\n    async findBalanceByAccountAddress(accountAddress: string): Promise<bigint> {\r\n       try {\r\n         return await this.tokenContract.methods.balanceOf(accountAddress).call();\r\n       } catch(error) {\r\n         return 0n;\r\n       }\r\n    }\r\n\r\n\r\n    async createAccount(): Promise<WalletCreatedDTO> {\r\n        if (!this._web3) {\r\n            throw new NotFoundException('Web3 is not configured.');\r\n        }\r\n        const account = this._web3.eth.accounts.create();\r\n        const { tokenAddress } = await this._blockchainTokenRepository.findFirst();\r\n        \r\n        return new WalletCreatedDTO({\r\n            accountAddress: account.address,\r\n            privateKey: account.privateKey,\r\n            tokenAddress\r\n        });\r\n    }\r\n\r\n\r\n    async onModuleInit() {\r\n        try {\r\n            const blockChainUrl = this._appConfig.blockchainURL;\r\n            this._web3 = new Web3(new Web3.providers.HttpProvider(blockChainUrl));\r\n            const { abi, evm } = contractOutputConfig as any;\r\n\r\n\r\n            const tokenAddressRecovered = await this._blockchainTokenRepository.findFirst();\r\n        \r\n            if (tokenAddressRecovered?.tokenAddress && (await this.checkToken(abi, tokenAddressRecovered.tokenAddress))) {\r\n                this.tokenContract = new this._web3.eth.Contract(abi, tokenAddressRecovered.tokenAddress);\r\n                return;\r\n            } \r\n        \r\n            await this._blockchainTokenRepository.deleteAll();\r\n        \r\n            let accounts: string[] = [];\r\n            accounts = await this._web3.eth.getAccounts();\r\n\r\n            if (!accounts.length) return;\r\n            const account = accounts[0];\r\n            const INITIAL_SUPPLY = 1000000000000000000000000n;\r\n\r\n            const result = await new this._web3.eth.Contract(abi)\r\n            .deploy({ data: evm.bytecode.object, arguments: [INITIAL_SUPPLY] })\r\n            .send({\r\n                from: account,\r\n                gas: '1500000',\r\n                gasPrice: '30000000000',\r\n            });\r\n\r\n            const blockchainToken = new BlockchainToken({\r\n                tokenAddress: result.options.address,\r\n                accountAddress: account,\r\n            });\r\n\r\n            await this._blockchainTokenRepository.create(blockchainToken);\r\n            this.tokenContract = new this._web3.eth.Contract(abi, blockchainToken.tokenAddress);\r\n        } catch(error) {\r\n            console.log(error); \r\n        }\r\n    }\r\n \r\n    async checkToken(abi: any, tokenAddress: string) {\r\n        try {\r\n            const tokenContract = new this._web3.eth.Contract(abi, tokenAddress);\r\n            await Promise.all([tokenContract.methods.name().call(),  tokenContract.methods.symbol().call()]);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["BlockchainTokenService","web3","_web3","registerVote","address","publicConsultationId","console","log","tokenContract","methods","castVote","send","from","error","findBalanceByAccountAddress","accountAddress","balanceOf","call","createAccount","NotFoundException","account","eth","accounts","create","tokenAddress","_blockchainTokenRepository","findFirst","WalletCreatedDTO","privateKey","onModuleInit","blockChainUrl","_appConfig","blockchainURL","Web3","providers","HttpProvider","abi","evm","contractOutputConfig","tokenAddressRecovered","checkToken","Contract","deleteAll","getAccounts","length","INITIAL_SUPPLY","result","deploy","data","bytecode","object","arguments","gas","gasPrice","blockchainToken","BlockchainToken","options","Promise","all","name","symbol","constructor"],"mappings":"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"}