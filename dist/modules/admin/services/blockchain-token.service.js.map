{"version":3,"sources":["../../../../src/modules/admin/services/blockchain-token.service.ts"],"sourcesContent":["import { Inject, Injectable, Logger, NotFoundException, OnModuleInit } from \"@nestjs/common\";\r\nimport ganache, { EthereumProvider, ServerOptions } from \"ganache\";\r\nimport contractOutputConfig from \"src/config/blockchain/contract-output.config\";\r\nimport AppConfig from \"src/modules/shared/app.config\";\r\nimport Web3, { Contract } from \"web3\";\r\nimport WalletCreatedDTO from \"../dtos/wallet-created.dto\";\r\nimport { BLOCKCHAIN_REPOSITORY_TOKEN, IBlockchainTokenRepository } from \"../interfaces/blockchain-token-repository.interface\";\r\nimport { IBlockchainTokenService } from \"../interfaces/blockchain-token-service.interface\";\r\nimport { BlockchainToken } from \"../schemas/blockchain-token.schema\";\r\nimport { Connection } from \"mongoose\";\r\nimport { InjectConnection } from \"@nestjs/mongoose\";\r\n\r\n@Injectable()\r\nexport default class BlockchainTokenService implements OnModuleInit, IBlockchainTokenService {\r\n    \r\n    static readonly INITIAL_SUPPLY = 1000000000000000000000000n;\r\n    static readonly GAS = '6721975';\r\n    static readonly GAS_PRICE = '875000000';\r\n    static readonly TOTAL_ACCOUNTS = 1;\r\n    static readonly REWARD_TOKEN_TO_SEND = BigInt(100) * BigInt(10 ** 18);\r\n    static readonly DEFAULT_ETHER_TO_NEW_ACCOUNT = 1000;\r\n\r\n    readonly logger = new Logger(BlockchainTokenService.name);\r\n \r\n    private _web3: Web3;\r\n\r\n    private tokenContract: Contract<any>;\r\n\r\n    get web3() {\r\n        return this._web3;\r\n    }\r\n\r\n    constructor(\r\n        @Inject(BLOCKCHAIN_REPOSITORY_TOKEN)\r\n        private readonly _blockchainTokenRepository: IBlockchainTokenRepository,\r\n        private readonly _appConfig: AppConfig,\r\n        @InjectConnection()\r\n        private readonly _connection: Connection\r\n    ) {}\r\n\r\n    async transferReward(toAddress: string): Promise<boolean> {\r\n        try {\r\n            const { accountAddress } = await this._blockchainTokenRepository.findFirst();\r\n \r\n            await this.tokenContract.methods.transfer(toAddress, BlockchainTokenService.REWARD_TOKEN_TO_SEND)\r\n                .send({\r\n                    from: accountAddress,\r\n                });\r\n                \r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async transferEther(toAddress: string): Promise<boolean> {\r\n        try {\r\n            const { accountAddress, privateKey } = await this._blockchainTokenRepository.findFirst();\r\n            const amountInWei = this._web3.utils.toWei(BlockchainTokenService.DEFAULT_ETHER_TO_NEW_ACCOUNT, 'ether');\r\n            const tx = {\r\n                from: accountAddress,\r\n                to: toAddress,\r\n                value: amountInWei,\r\n                gas: BlockchainTokenService.GAS,\r\n                gasPrice: BlockchainTokenService.GAS_PRICE,\r\n            };\r\n\r\n            const signed = await this._web3.eth.accounts.signTransaction(tx, privateKey);\r\n            await this._web3.eth.sendSignedTransaction(signed.rawTransaction);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    async registerVote(address: string, privateKey: string, publicConsultationId: string): Promise<boolean> {\r\n       try {\r\n       \r\n            if (!this.web3.eth.accounts.wallet[address]) {\r\n                this.web3.eth.accounts.wallet.add(privateKey);\r\n            }\r\n\r\n            await this.tokenContract.methods.castVote(publicConsultationId)\r\n                .send({ from: address });\r\n            return true;\r\n       } catch(error) {\r\n            console.log(error)\r\n            return false;\r\n       }\r\n    }\r\n\r\n\r\n    async findBalanceByAccountAddress(accountAddress: string): Promise<bigint> {\r\n       try {\r\n         return await this.tokenContract.methods.balanceOf(accountAddress).call();\r\n       } catch(error) {\r\n         return 0n;\r\n       }\r\n    }\r\n\r\n    async createAccount(): Promise<WalletCreatedDTO> {\r\n        if (!this._web3) {\r\n            throw new NotFoundException('Web3 is not configured.');\r\n        }\r\n        const account = this._web3.eth.accounts.create();\r\n        const { tokenAddress } = await this._blockchainTokenRepository.findFirst();\r\n        \r\n        return new WalletCreatedDTO({\r\n            accountAddress: account.address,\r\n            privateKey: account.privateKey,\r\n            tokenAddress\r\n        });\r\n    }\r\n\r\n    async onModuleInit() {\r\n        try {\r\n            await this._connection.dropDatabase();\r\n            const SERVER_PORT = parseInt(this._appConfig.blockchainServerPORT);\r\n            const options: ServerOptions = {\r\n                wallet: {\r\n                    defaultBalance: Number.MAX_SAFE_INTEGER,\r\n                    totalAccounts: BlockchainTokenService.TOTAL_ACCOUNTS,\r\n                },\r\n            };\r\n            const server = ganache.server(options);\r\n            \r\n            server.listen(SERVER_PORT, async err => {\r\n                if (err) throw err;\r\n                this.logger.log(`ganache listening on port ${SERVER_PORT}...`)\r\n                const provider = server.provider;\r\n                await this.startWeb3(provider);\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async startWeb3(provider: EthereumProvider) {\r\n        this._web3 = new Web3(provider);\r\n        const { abi, evm } = contractOutputConfig as any;\r\n        \r\n        await this._blockchainTokenRepository.deleteAll();\r\n    \r\n        let accounts: string[] = [];\r\n        accounts = await this._web3.eth.getAccounts();\r\n\r\n        if (!accounts.length) {\r\n            this.logger.warn('Não há nenhuma conta padrão cadastrada.');\r\n            return;\r\n        }\r\n\r\n        const account = accounts[0];\r\n        const accountInfo = provider.getInitialAccounts()[account.toLowerCase()];\r\n        const result = await new this._web3.eth.Contract(abi)\r\n\r\n        .deploy({ data: evm.bytecode.object, arguments: [BlockchainTokenService.INITIAL_SUPPLY] })\r\n        .send({\r\n            from: account,\r\n            gas: BlockchainTokenService.GAS,\r\n            gasPrice: BlockchainTokenService.GAS_PRICE,\r\n        });\r\n\r\n        const blockchainToken = new BlockchainToken({\r\n            tokenAddress: result.options.address,\r\n            accountAddress: account,\r\n            privateKey: accountInfo.secretKey,\r\n        });\r\n\r\n        await this._blockchainTokenRepository.create(blockchainToken);\r\n\r\n        this.tokenContract = new this._web3.eth.Contract(abi, blockchainToken.tokenAddress);\r\n    }\r\n \r\n    async checkToken(abi: any, tokenAddress: string) {\r\n        try {\r\n            const tokenContract = new this._web3.eth.Contract(abi, tokenAddress);\r\n            await Promise.all([tokenContract.methods.name().call(),  tokenContract.methods.symbol().call()]);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["BlockchainTokenService","web3","_web3","transferReward","toAddress","accountAddress","_blockchainTokenRepository","findFirst","tokenContract","methods","transfer","REWARD_TOKEN_TO_SEND","send","from","transferEther","privateKey","amountInWei","utils","toWei","DEFAULT_ETHER_TO_NEW_ACCOUNT","tx","to","value","gas","GAS","gasPrice","GAS_PRICE","signed","eth","accounts","signTransaction","sendSignedTransaction","rawTransaction","registerVote","address","publicConsultationId","wallet","add","castVote","error","console","log","findBalanceByAccountAddress","balanceOf","call","createAccount","NotFoundException","account","create","tokenAddress","WalletCreatedDTO","onModuleInit","_connection","dropDatabase","SERVER_PORT","parseInt","_appConfig","blockchainServerPORT","options","defaultBalance","Number","MAX_SAFE_INTEGER","totalAccounts","TOTAL_ACCOUNTS","server","ganache","listen","err","logger","provider","startWeb3","Web3","abi","evm","contractOutputConfig","deleteAll","getAccounts","length","warn","accountInfo","getInitialAccounts","toLowerCase","result","Contract","deploy","data","bytecode","object","arguments","INITIAL_SUPPLY","blockchainToken","BlockchainToken","secretKey","checkToken","Promise","all","name","symbol","constructor","Logger","BigInt"],"mappings":"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"}