{"version":3,"sources":["../../../../src/modules/admin/services/blockchain-token.service.ts"],"sourcesContent":["import { Inject, Injectable, Logger, NotFoundException, OnModuleInit } from \"@nestjs/common\";\r\nimport ganache, { EthereumProvider, ServerOptions } from \"ganache\";\r\nimport contractOutputConfig from \"src/config/blockchain/contract-output.config\";\r\nimport AppConfig from \"src/modules/shared/app.config\";\r\nimport Web3, { Contract } from \"web3\";\r\nimport WalletCreatedDTO from \"../dtos/wallet-created.dto\";\r\nimport { BLOCKCHAIN_REPOSITORY_TOKEN, IBlockchainTokenRepository } from \"../interfaces/blockchain-token-repository.interface\";\r\nimport { IBlockchainTokenService } from \"../interfaces/blockchain-token-service.interface\";\r\nimport { BlockchainToken } from \"../schemas/blockchain-token.schema\";\r\n\r\n@Injectable()\r\nexport default class BlockchainTokenService implements OnModuleInit, IBlockchainTokenService {\r\n    \r\n    static readonly INITIAL_SUPPLY = 1000000000000000000000000n;\r\n    static readonly GAS = '6721975';\r\n    static readonly GAS_PRICE = '875000000';\r\n    static readonly TOTAL_ACCOUNTS = 1;\r\n    static readonly TOTAL_TOKEN_TO_SEND = 10n;\r\n\r\n    readonly logger = new Logger(BlockchainTokenService.name);\r\n \r\n    private _web3: Web3;\r\n\r\n    private tokenContract: Contract<any>;\r\n\r\n    get web3() {\r\n        return this._web3;\r\n    }\r\n\r\n    constructor(\r\n        @Inject(BLOCKCHAIN_REPOSITORY_TOKEN)\r\n        private readonly _blockchainTokenRepository: IBlockchainTokenRepository,\r\n        private readonly _appConfig: AppConfig\r\n    ) {}\r\n\r\n    async transferReward(toAddress: string): Promise<boolean> {\r\n        try {\r\n            const { accountAddress } = await this._blockchainTokenRepository.findFirst();\r\n\r\n            await this.tokenContract.methods.transfer(toAddress, BlockchainTokenService.TOTAL_TOKEN_TO_SEND)\r\n                .send({\r\n                    from: accountAddress,\r\n                });\r\n                \r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async transferEther(toAddress: string): Promise<boolean> {\r\n        try {\r\n            const { accountAddress, privateKey } = await this._blockchainTokenRepository.findFirst();\r\n            const amountInWei = this._web3.utils.toWei(1000, 'ether');\r\n            const tx = {\r\n                from: accountAddress,\r\n                to: toAddress,\r\n                value: amountInWei,\r\n                gas: BlockchainTokenService.GAS,\r\n                gasPrice: BlockchainTokenService.GAS_PRICE,\r\n            };\r\n\r\n            const signed = await this._web3.eth.accounts.signTransaction(tx, privateKey);\r\n            await this._web3.eth.sendSignedTransaction(signed.rawTransaction);\r\n            return true;\r\n        } catch(error) {\r\n            console.log(error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    async registerVote(address: string, publicConsultationId: string): Promise<boolean> {\r\n       try {\r\n            await this.tokenContract.methods.castVote(publicConsultationId)\r\n                .send({ from: address });\r\n            return true;\r\n       } catch(error) {\r\n            return false;\r\n       }\r\n    }\r\n\r\n\r\n    async findBalanceByAccountAddress(accountAddress: string): Promise<bigint> {\r\n       try {\r\n         return await this.tokenContract.methods.balanceOf(accountAddress).call();\r\n       } catch(error) {\r\n         return 0n;\r\n       }\r\n    }\r\n\r\n    async createAccount(): Promise<WalletCreatedDTO> {\r\n        if (!this._web3) {\r\n            throw new NotFoundException('Web3 is not configured.');\r\n        }\r\n        const account = this._web3.eth.accounts.create();\r\n        const { tokenAddress } = await this._blockchainTokenRepository.findFirst();\r\n        \r\n        return new WalletCreatedDTO({\r\n            accountAddress: account.address,\r\n            privateKey: account.privateKey,\r\n            tokenAddress\r\n        });\r\n    }\r\n\r\n    async onModuleInit() {\r\n        try {\r\n            const SERVER_PORT = parseInt(this._appConfig.blockchainServerPORT);\r\n            const options: ServerOptions = {\r\n                wallet: {\r\n                    defaultBalance: Number.MAX_SAFE_INTEGER,\r\n                    totalAccounts: BlockchainTokenService.TOTAL_ACCOUNTS,\r\n                },\r\n            };\r\n            const server = ganache.server(options);\r\n            \r\n            server.listen(SERVER_PORT, async err => {\r\n                if (err) throw err;\r\n                this.logger.log(`ganache listening on port ${SERVER_PORT}...`)\r\n                const provider = server.provider;\r\n                await this.startWeb3(provider);\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async startWeb3(provider: EthereumProvider) {\r\n        this._web3 = new Web3(provider);\r\n        const { abi, evm } = contractOutputConfig as any;\r\n        \r\n        await this._blockchainTokenRepository.deleteAll();\r\n    \r\n        let accounts: string[] = [];\r\n        accounts = await this._web3.eth.getAccounts();\r\n\r\n        if (!accounts.length) {\r\n            this.logger.warn('Não há nenhuma conta padrão cadastrada.');\r\n            return;\r\n        }\r\n\r\n        const account = accounts[0];\r\n        const accountInfo = provider.getInitialAccounts()[account.toLowerCase()];\r\n        const result = await new this._web3.eth.Contract(abi)\r\n\r\n        .deploy({ data: evm.bytecode.object, arguments: [BlockchainTokenService.INITIAL_SUPPLY] })\r\n        .send({\r\n            from: account,\r\n            gas: BlockchainTokenService.GAS,\r\n            gasPrice: BlockchainTokenService.GAS_PRICE,\r\n        });\r\n\r\n        const blockchainToken = new BlockchainToken({\r\n            tokenAddress: result.options.address,\r\n            accountAddress: account,\r\n            privateKey: accountInfo.secretKey,\r\n        });\r\n\r\n        await this._blockchainTokenRepository.create(blockchainToken);\r\n\r\n        this.tokenContract = new this._web3.eth.Contract(abi, blockchainToken.tokenAddress);\r\n    }\r\n \r\n    async checkToken(abi: any, tokenAddress: string) {\r\n        try {\r\n            const tokenContract = new this._web3.eth.Contract(abi, tokenAddress);\r\n            await Promise.all([tokenContract.methods.name().call(),  tokenContract.methods.symbol().call()]);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["BlockchainTokenService","web3","_web3","transferReward","toAddress","accountAddress","_blockchainTokenRepository","findFirst","tokenContract","methods","transfer","TOTAL_TOKEN_TO_SEND","send","from","transferEther","privateKey","amountInWei","utils","toWei","tx","to","value","gas","GAS","gasPrice","GAS_PRICE","signed","eth","accounts","signTransaction","sendSignedTransaction","rawTransaction","error","console","log","registerVote","address","publicConsultationId","castVote","findBalanceByAccountAddress","balanceOf","call","createAccount","NotFoundException","account","create","tokenAddress","WalletCreatedDTO","onModuleInit","SERVER_PORT","parseInt","_appConfig","blockchainServerPORT","options","wallet","defaultBalance","Number","MAX_SAFE_INTEGER","totalAccounts","TOTAL_ACCOUNTS","server","ganache","listen","err","logger","provider","startWeb3","Web3","abi","evm","contractOutputConfig","deleteAll","getAccounts","length","warn","accountInfo","getInitialAccounts","toLowerCase","result","Contract","deploy","data","bytecode","object","arguments","INITIAL_SUPPLY","blockchainToken","BlockchainToken","secretKey","checkToken","Promise","all","name","symbol","constructor","Logger"],"mappings":"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"}