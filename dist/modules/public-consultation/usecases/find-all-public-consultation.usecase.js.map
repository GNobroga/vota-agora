{"version":3,"sources":["../../../../src/modules/public-consultation/usecases/find-all-public-consultation.usecase.ts"],"sourcesContent":["import { Inject, Injectable } from \"@nestjs/common\";\r\nimport Paginator from \"src/core/models/Paginator\";\r\nimport IDefaultUseCase from \"src/core/usecases/default.usecase\";\r\nimport { User } from \"src/modules/users/user.schema\";\r\nimport PublicConsultationResponseDTO from \"../dtos/response/public-consultation-response.dto\";\r\nimport { IPublicConsultationRepository, PUBLIC_CONSULTATION_REPOSITORY_TOKEN } from \"../interfaces/public-consultation-repository.interface\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport PublicConsultationVote from \"../schemas/public-consultation-vote.schema\";\r\nimport { Model } from \"mongoose\";\r\n\r\n@Injectable()\r\nexport default class FindAllPublicConsultationUseCase implements IDefaultUseCase<Paginator, PublicConsultationResponseDTO[]> {\r\n\r\n    constructor(\r\n        @Inject(PUBLIC_CONSULTATION_REPOSITORY_TOKEN)\r\n        private readonly _publicConsultationRepository: IPublicConsultationRepository,\r\n        @InjectModel(PublicConsultationVote.name)\r\n        private readonly _publicConsultationVoteModel: Model<PublicConsultationVote>\r\n\r\n    ) {}\r\n\r\n    async execute(input: Paginator): Promise<PublicConsultationResponseDTO[]> {\r\n        const result = (await this._publicConsultationRepository.findAll(input)).map(async src => {\r\n            const owner = src.owner as User;\r\n            \r\n            return {\r\n                id: src['_id'],\r\n                title: src.title,\r\n                description: src.description,\r\n                initialDate: src.initialDate,\r\n                endDate: src.endDate,\r\n                imageUrl: src.imageUrl,\r\n                voted: await this.hasVoted(owner['_id'], src['_id']),\r\n                owner: {\r\n                    id: owner['_id'],\r\n                    fullName: owner.fullName,\r\n                    document: owner.document,\r\n                },\r\n            };\r\n        });\r\n\r\n        return await Promise.all(result);\r\n    }\r\n\r\n    private async hasVoted(userId: string, publicConsultationId: string) {\r\n        try {\r\n           const result = this._publicConsultationVoteModel.findOne({\r\n                publicConsultation: publicConsultationId,\r\n                user: userId\r\n            }).exec();\r\n            (await result).toObject();\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}"],"names":["FindAllPublicConsultationUseCase","execute","input","result","_publicConsultationRepository","findAll","map","src","owner","id","title","description","initialDate","endDate","imageUrl","voted","hasVoted","fullName","document","Promise","all","userId","publicConsultationId","_publicConsultationVoteModel","findOne","publicConsultation","user","exec","toObject","constructor","name"],"mappings":";;;;;;;eAWqBA;;;wBAXc;uDAKiD;0BACxD;qFACO;2BACb;;;;;;;;;;;;;;;;;;;;AAGP,IAAA,AAAMA,mCAAN,MAAMA;IAUjB,MAAMC,QAAQC,KAAgB,EAA4C;QACtE,MAAMC,SAAS,AAAC,CAAA,MAAM,IAAI,CAACC,6BAA6B,CAACC,OAAO,CAACH,MAAK,EAAGI,GAAG,CAAC,OAAMC;YAC/E,MAAMC,QAAQD,IAAIC,KAAK;YAEvB,OAAO;gBACHC,IAAIF,GAAG,CAAC,MAAM;gBACdG,OAAOH,IAAIG,KAAK;gBAChBC,aAAaJ,IAAII,WAAW;gBAC5BC,aAAaL,IAAIK,WAAW;gBAC5BC,SAASN,IAAIM,OAAO;gBACpBC,UAAUP,IAAIO,QAAQ;gBACtBC,OAAO,MAAM,IAAI,CAACC,QAAQ,CAACR,KAAK,CAAC,MAAM,EAAED,GAAG,CAAC,MAAM;gBACnDC,OAAO;oBACHC,IAAID,KAAK,CAAC,MAAM;oBAChBS,UAAUT,MAAMS,QAAQ;oBACxBC,UAAUV,MAAMU,QAAQ;gBAC5B;YACJ;QACJ;QAEA,OAAO,MAAMC,QAAQC,GAAG,CAACjB;IAC7B;IAEA,MAAca,SAASK,MAAc,EAAEC,oBAA4B,EAAE;QACjE,IAAI;YACD,MAAMnB,SAAS,IAAI,CAACoB,4BAA4B,CAACC,OAAO,CAAC;gBACpDC,oBAAoBH;gBACpBI,MAAML;YACV,GAAGM,IAAI;YACN,CAAA,MAAMxB,MAAK,EAAGyB,QAAQ;YACvB,OAAO;QACX,EAAE,OAAM;YACJ,OAAO;QACX;IACJ;IA1CAC,YACI,AACiBzB,6BAA4D,EAC7E,AACiBmB,4BAA2D,CAE9E;aAJmBnB,gCAAAA;aAEAmB,+BAAAA;IAElB;AAqCP;;;;kFAxC4CO"}