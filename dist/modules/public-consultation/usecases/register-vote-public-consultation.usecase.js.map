{"version":3,"sources":["../../../../src/modules/public-consultation/usecases/register-vote-public-consultation.usecase.ts"],"sourcesContent":["import { BadRequestException, Inject, Injectable, NotFoundException } from \"@nestjs/common\";\r\nimport IDefaultUseCase from \"src/core/usecases/default.usecase\";\r\nimport { BLOCKCHAIN_SERVICE_TOKEN, IBlockchainTokenService } from \"src/modules/admin/interfaces/blockchain-token-service.interface\";\r\nimport { IPublicConsultationRepository, PUBLIC_CONSULTATION_REPOSITORY_TOKEN } from \"../interfaces/public-consultation-repository.interface\";\r\nimport { RegisterVotePublicConsultationInput } from \"./inputs/register-vote-public-consultation.input\";\r\nimport { IUserRepository, USER_REPOSITORY_TOKEN } from \"src/modules/users/interfaces/user-repository.interface\";\r\nimport PublicConsultationVote from \"../schemas/public-consultation-vote.schema\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\n\r\n@Injectable()\r\nexport default class RegisterVotePublicConsultationUseCase implements IDefaultUseCase<RegisterVotePublicConsultationInput, boolean> {\r\n\r\n    constructor(\r\n        @Inject(PUBLIC_CONSULTATION_REPOSITORY_TOKEN)\r\n        private readonly _publicConsultationRepository: IPublicConsultationRepository,\r\n        @Inject(USER_REPOSITORY_TOKEN)\r\n        private readonly _userRepositoryToken: IUserRepository,\r\n        @Inject(BLOCKCHAIN_SERVICE_TOKEN)\r\n        private readonly _blockchainTokenService: IBlockchainTokenService,\r\n        @InjectModel(PublicConsultationVote.name)\r\n        private readonly _publicConsultationVoteModel: Model<PublicConsultationVote>\r\n    ) {}\r\n\r\n\r\n    async execute(input: RegisterVotePublicConsultationInput) {\r\n        const user = await this._userRepositoryToken.findByDocument(input.userDocument);\r\n\r\n        if (!user) {\r\n            throw new NotFoundException(`Usuário com documento ${input.userDocument} não foi encontrado.`);\r\n        }\r\n\r\n        const publicConsultation = await this._publicConsultationRepository.findById(input.publicConsultationId);\r\n\r\n        // Se a consulta publica for do usuario em questão, ele não pode se auto votar.\r\n        if (publicConsultation.owner.toString() == user['_id']) {\r\n            throw new BadRequestException('Não é permitido o dono da consulta publica votar nela mesmo.');\r\n        }\r\n\r\n        if (!publicConsultation) {\r\n            throw new NotFoundException(`Consulta pública com identificação ${input.publicConsultationId} não foi encontrada.`);\r\n        }\r\n     \r\n        const isRegistred = await this._blockchainTokenService.registerVote(user.accountAddress, user.privateKey, input.publicConsultationId);\r\n     \r\n        if (!isRegistred) {\r\n            return false;\r\n        }\r\n\r\n        await this._blockchainTokenService.transferReward(user.accountAddress);\r\n        \r\n        await this._publicConsultationVoteModel.create({\r\n            publicConsultation: new Types.ObjectId(input.publicConsultationId),\r\n            user: new Types.ObjectId(user['_id'] as string), \r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n}"],"names":["RegisterVotePublicConsultationUseCase","execute","input","user","_userRepositoryToken","findByDocument","userDocument","NotFoundException","publicConsultation","_publicConsultationRepository","findById","publicConsultationId","owner","toString","BadRequestException","isRegistred","_blockchainTokenService","registerVote","accountAddress","privateKey","transferReward","_publicConsultationVoteModel","create","Types","ObjectId","constructor","name"],"mappings":";;;;;;;eAWqBA;;;wBAXsD;iDAET;uDACkB;yCAE7B;qFACpB;0BACN;2BACD;;;;;;;;;;;;;;;;;;;;AAGb,IAAA,AAAMA,wCAAN,MAAMA;IAcjB,MAAMC,QAAQC,KAA0C,EAAE;QACtD,MAAMC,OAAO,MAAM,IAAI,CAACC,oBAAoB,CAACC,cAAc,CAACH,MAAMI,YAAY;QAE9E,IAAI,CAACH,MAAM;YACP,MAAM,IAAII,yBAAiB,CAAC,CAAC,sBAAsB,EAAEL,MAAMI,YAAY,CAAC,oBAAoB,CAAC;QACjG;QAEA,MAAME,qBAAqB,MAAM,IAAI,CAACC,6BAA6B,CAACC,QAAQ,CAACR,MAAMS,oBAAoB;QAEvG,+EAA+E;QAC/E,IAAIH,mBAAmBI,KAAK,CAACC,QAAQ,MAAMV,IAAI,CAAC,MAAM,EAAE;YACpD,MAAM,IAAIW,2BAAmB,CAAC;QAClC;QAEA,IAAI,CAACN,oBAAoB;YACrB,MAAM,IAAID,yBAAiB,CAAC,CAAC,mCAAmC,EAAEL,MAAMS,oBAAoB,CAAC,oBAAoB,CAAC;QACtH;QAEA,MAAMI,cAAc,MAAM,IAAI,CAACC,uBAAuB,CAACC,YAAY,CAACd,KAAKe,cAAc,EAAEf,KAAKgB,UAAU,EAAEjB,MAAMS,oBAAoB;QAEpI,IAAI,CAACI,aAAa;YACd,OAAO;QACX;QAEA,MAAM,IAAI,CAACC,uBAAuB,CAACI,cAAc,CAACjB,KAAKe,cAAc;QAErE,MAAM,IAAI,CAACG,4BAA4B,CAACC,MAAM,CAAC;YAC3Cd,oBAAoB,IAAIe,eAAK,CAACC,QAAQ,CAACtB,MAAMS,oBAAoB;YACjER,MAAM,IAAIoB,eAAK,CAACC,QAAQ,CAACrB,IAAI,CAAC,MAAM;QACxC;QAEA,OAAO;IACX;IA5CAsB,YACI,AACiBhB,6BAA4D,EAC7E,AACiBL,oBAAqC,EACtD,AACiBY,uBAAgD,EACjE,AACiBK,4BAA2D,CAC9E;aAPmBZ,gCAAAA;aAEAL,uBAAAA;aAEAY,0BAAAA;aAEAK,+BAAAA;IAClB;AAqCP;;;;;;mFAvC4CK"}